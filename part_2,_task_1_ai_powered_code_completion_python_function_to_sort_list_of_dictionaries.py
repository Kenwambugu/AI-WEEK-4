# -*- coding: utf-8 -*-
"""Part 2, Task 1: AI-Powered Code Completion - Python Function to Sort List of Dictionaries

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1hvBJUclpaySg98ZlU_33N8IpkoAqg6UR
"""

# -*- coding: utf-8 -*-
# This script demonstrates a Python function to sort a list of dictionaries by a specific key.
# It also includes a "simulated AI-suggested" version for comparison,
# as a live AI code completion tool like GitHub Copilot cannot be directly integrated here.

def sort_list_of_dicts_manual(data, key, reverse=False):
    """
    Manually implemented Python function to sort a list of dictionaries by a specific key.

    This function iterates through the list, compares elements, and swaps them
    if they are not in the desired order. This is a basic bubble sort-like
    approach, which is generally less efficient than built-in sort methods.

    Args:
        data (list): A list of dictionaries to be sorted.
        key (str): The key in the dictionaries to sort by.
        reverse (bool, optional): If True, sort in descending order. Defaults to False.

    Returns:
        list: The sorted list of dictionaries.
    """
    n = len(data)
    for i in range(n - 1):
        for j in range(0, n - i - 1):
            # Compare elements based on the specified key
            if reverse:
                if data[j][key] < data[j + 1][key]:
                    data[j], data[j + 1] = data[j + 1], data[j]
            else:
                if data[j][key] > data[j + 1][key]:
                    data[j], data[j + 1] = data[j + 1], data[j]
    return data

def sort_list_of_dicts_ai_suggested(data, key, reverse=False):
    """
    Simulated AI-suggested Python function to sort a list of dictionaries by a specific key.

    AI code completion tools like GitHub Copilot typically suggest using highly
    optimized built-in Python functions (e.g., list.sort() or sorted()) with
    lambda functions for custom sorting criteria. This method is generally
    more efficient for real-world scenarios due to its C-level optimization.

    Args:
        data (list): A list of dictionaries to be sorted.
        key (str): The key in the dictionaries to sort by.
        reverse (bool, optional): If True, sort in descending order. Defaults to False.

    Returns:
        list: The sorted list of dictionaries.
    """
    # AI would likely suggest using Python's built-in `sorted()` function for efficiency
    # along with a `lambda` function as the key for sorting dictionaries.
    # It might even directly suggest the syntax below if the context implies sorting.
    return sorted(data, key=lambda x: x[key], reverse=reverse)

# --- Example Usage ---
if __name__ == "__main__":
    sample_data = [
        {"name": "Alice", "age": 30, "score": 85},
        {"name": "Bob", "age": 24, "score": 92},
        {"name": "Charlie", "age": 35, "score": 78},
        {"name": "David", "age": 24, "score": 95},
    ]

    print("Original Data:")
    for item in sample_data:
        print(item)
    print("\n" + "="*30 + "\n")

    # --- Manual Implementation Comparison ---
    # Create a copy to avoid modifying the original list for the next test
    data_for_manual_sort = [item.copy() for item in sample_data]
    sorted_by_age_manual = sort_list_of_dicts_manual(data_for_manual_sort, 'age')
    print("Sorted by 'age' (Manual Implementation - Ascending):")
    for item in sorted_by_age_manual:
        print(item)
    print("\n" + "="*30 + "\n")

    data_for_manual_sort_desc = [item.copy() for item in sample_data]
    sorted_by_score_desc_manual = sort_list_of_dicts_manual(data_for_manual_sort_desc, 'score', reverse=True)
    print("Sorted by 'score' (Manual Implementation - Descending):")
    for item in sorted_by_score_desc_manual:
        print(item)
    print("\n" + "="*30 + "\n")

    # --- AI-Suggested Implementation Comparison ---
    # Create a fresh copy for the AI-suggested sort
    data_for_ai_sort = [item.copy() for item in sample_data]
    sorted_by_age_ai = sort_list_of_dicts_ai_suggested(data_for_ai_sort, 'age')
    print("Sorted by 'age' (AI-Suggested Implementation - Ascending):")
    for item in sorted_by_age_ai:
        print(item)
    print("\n" + "="*30 + "\n")

    data_for_ai_sort_desc = [item.copy() for item in sample_data]
    sorted_by_score_desc_ai = sort_list_of_dicts_ai_suggested(data_for_ai_sort_desc, 'score', reverse=True)
    print("Sorted by 'score' (AI-Suggested Implementation - Descending):")
    for item in sorted_by_score_desc_ai:
        print(item)
    print("\n" + "="*30 + "\n")

    # Example of sorting by a key that is the same for some elements
    data_for_tie_breaking = [
        {"name": "Alice", "age": 30, "score": 85},
        {"name": "Bob", "age": 24, "score": 92},
        {"name": "David", "age": 24, "score": 95}, # Same age as Bob, different score
        {"name": "Charlie", "age": 35, "score": 78},
    ]
    print("Original Data (for tie-breaking):")
    for item in data_for_tie_breaking:
        print(item)
    print("\n" + "="*30 + "\n")

    # AI-suggested (Python's built-in sort is stable, handles tie-breaking by original order)
    data_for_ai_tie_break = [item.copy() for item in data_for_tie_breaking]
    sorted_by_age_ai_tie_break = sort_list_of_dicts_ai_suggested(data_for_ai_tie_break, 'age')
    print("Sorted by 'age' (AI-Suggested - with tie-breaking):")
    for item in sorted_by_age_ai_tie_break:
        print(item)
    print("\n" + "="*30 + "\n")